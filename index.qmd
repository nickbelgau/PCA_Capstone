---
title: "Data Science Capstone - Principal Componenet Analysis"
author: "Nick Belgau, Oscar"
date: '`r Sys.Date()`'
format:
  html:
    code-fold: true
course: STA 6257 - Advanced Statistical Modeling
bibliography: references.bib # file contains bibtex for references
#always_allow_html: true # this allows to get PDF with HTML features
self-contained: true
execute: 
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 72
---

## Introduction

### Significance

### Scope of the Paper



## Methods

### Linear Algebra Foundations

Mathematical underpinnings
1. Standardize the data
2. Compare covariance matrix
3. Perform eigen decomposition or SVD. Each axis is orthogonal (no correlation)
4. Sort eigenvalues DESC, each is a principal component
5. Create projection matrix and project onto new feature space

Computations techniques. methods for computing PCA like SVD

Cite this paper [@bro2014principal]. 


### PCA Assumptions

1. Assume data can be represented as linear combinations of each other


### Best Practices


## Applications: Analysis and Results

### Application 1: General Dimensionality Reduction

Screeplot
Biplot

In one of these applications, discuss how PCA aids in building more robust statistical models by reducing multicollinearity and enhancing model interpretability


### Application 2: Feature Extraction
continuation of application 1 but go into ML part

### Application 3: Image Compression

New example. No scree plot or biplot because pixels.
Results to focus on memory reduction and maintaining equivalent level of performance.
This will be similar to appl 1 + 2 but without going into as much detail for techniques already demonstrated.

## Conclusion

Summary, reflections, future discissions

## References





```{r, warning=FALSE, echo=TRUE}
# Load Data
kable(head(murders))

ggplot1 = murders %>% ggplot(mapping = aes(x=population/10^6, y=total)) 

  ggplot1 + geom_point(aes(col=region), size = 4) +
  geom_text_repel(aes(label=abb)) +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(formula = "y~x", method=lm,se = F)+
  xlab("Populations in millions (log10 scale)") + 
  ylab("Total number of murders (log10 scale)") +
  ggtitle("US Gun Murders in 2010") +
  scale_color_discrete(name = "Region")+
      theme_bw()
```

$$
y_i = \beta_0 + \beta_1 X_1 +\varepsilon_i
$$